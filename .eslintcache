[{"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\Sidebar.js":"4","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Overview.js":"5","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\SidebarData.js":"6","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\SubMenu.js":"7","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\RootofEquation.js":"8","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Bisection.js":"9","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Newton.js":"10","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Onepoint.js":"11","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Cramer.js":"12","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LinearAlgebra.js":"13","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\JacobiIteration.js":"14","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Secant.js":"15","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\GaussElimination.js":"16","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\GaussSeidel.js":"17","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\ConjugateGradient.js":"18","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LuDecomposition.js":"19","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\NewtonDiff.js":"20","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Largrange.js":"21","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Linearregression.js":"22","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Interpolation.js":"23","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LeastSquares.js":"24","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Polynomial.js":"25","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\False_position.js":"26","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\Matrix.js":"27","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Splinex.js":"28","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\NewtonIterpolation.js":"29"},{"size":500,"mtime":1606676707000,"results":"30","hashOfConfig":"31"},{"size":3078,"mtime":1621574835736,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1606676707000,"results":"33","hashOfConfig":"31"},{"size":1685,"mtime":1606676707000,"results":"34","hashOfConfig":"31"},{"size":160,"mtime":1606676707000,"results":"35","hashOfConfig":"31"},{"size":3515,"mtime":1621529107473,"results":"36","hashOfConfig":"31"},{"size":1591,"mtime":1606676707000,"results":"37","hashOfConfig":"31"},{"size":189,"mtime":1621352025086,"results":"38","hashOfConfig":"31"},{"size":6164,"mtime":1621622328938,"results":"39","hashOfConfig":"31"},{"size":3888,"mtime":1621575587035,"results":"40","hashOfConfig":"31"},{"size":3739,"mtime":1621575557476,"results":"41","hashOfConfig":"31"},{"size":4312,"mtime":1621575784837,"results":"42","hashOfConfig":"31"},{"size":187,"mtime":1621353752687,"results":"43","hashOfConfig":"31"},{"size":4964,"mtime":1621576058000,"results":"44","hashOfConfig":"31"},{"size":4168,"mtime":1621575644685,"results":"45","hashOfConfig":"31"},{"size":5261,"mtime":1621575871316,"results":"46","hashOfConfig":"31"},{"size":4980,"mtime":1621576914349,"results":"47","hashOfConfig":"31"},{"size":5549,"mtime":1621577048720,"results":"48","hashOfConfig":"31"},{"size":7105,"mtime":1621575966916,"results":"49","hashOfConfig":"31"},{"size":5661,"mtime":1621577401503,"results":"50","hashOfConfig":"31"},{"size":5878,"mtime":1621525847447,"results":"51","hashOfConfig":"31"},{"size":4694,"mtime":1621577659128,"results":"52","hashOfConfig":"31"},{"size":186,"mtime":1621354577194,"results":"53","hashOfConfig":"31"},{"size":195,"mtime":1621355162951,"results":"54","hashOfConfig":"31"},{"size":5097,"mtime":1621577610755,"results":"55","hashOfConfig":"31"},{"size":4741,"mtime":1621575538433,"results":"56","hashOfConfig":"31"},{"size":1238,"mtime":1621455574054,"results":"57","hashOfConfig":"31"},{"size":4690,"mtime":1621577122041,"results":"58","hashOfConfig":"31"},{"size":5685,"mtime":1621574933588,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"4mfgov",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\index.js",[],["126","127"],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\Sidebar.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Overview.js",[],["128","129"],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\SidebarData.js",["130"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\nimport * as RiIcons from 'react-icons/ri';\n\nexport const SidebarData = [\n  {\n    title: 'Root of Equation',\n    path: '/RootofEquation',\n    icon: <AiIcons.AiFillHome />,\n    iconClosed: <RiIcons.RiArrowDownSFill />,\n    iconOpened: <RiIcons.RiArrowUpSFill />,\n\n    subNav: [\n      {\n        title: 'Bisection',\n        path: '/RootofEquation/Bisection',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'False Position',\n        path: '/RootofEquation/False_position',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'One-Point Iteration',\n        path: '/RootofEquation/Onepoint',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Newton-Raphson',\n        path: '/RootofEquation/Newton',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Secant Method',\n        path: '/RootofEquation/Secant',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Linear Algebra',\n    path: '/LinearAlgebra',\n    icon: <AiIcons.AiFillHome />,\n    iconClosed: <RiIcons.RiArrowDownSFill />,\n    iconOpened: <RiIcons.RiArrowUpSFill />,\n\n    subNav: [\n      {\n        title: 'Cramer Rule',\n        path: '/LinearAlgebra/Cramer',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'Gauss Elimination',\n        path: '/LinearAlgebra/GaussElimination',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'LU Decomposition',\n        path: '/LinearAlgebra/LuDecomposition',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Jacobi Iteration Method',\n        path: '/LinearAlgebra/JacobiIteration',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Gauss Seidel Iteration',\n        path: '/LinearAlgebra/GaussSeidel',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Conjugate Gradient Method',\n        path: '/LinearAlgebra/ConjugateGradient',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Interpolation',\n    path: '/Interpolation',\n    icon: <AiIcons.AiFillHome />,\n    iconClosed: <RiIcons.RiArrowDownSFill />,\n    iconOpened: <RiIcons.RiArrowUpSFill />,\n\n    subNav: [\n      {\n        title: 'Newton Divide Difference',\n        path: '/Interpolation/NewtonDiff',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'Largrange',\n        path: '/Interpolation/Largrange',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'Spline',\n        path: '/Interpolation/Splinex',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Least Squares Regression',\n    path: '/LeastSquares',\n    icon: <AiIcons.AiFillHome />,\n    iconClosed: <RiIcons.RiArrowDownSFill />,\n    iconOpened: <RiIcons.RiArrowUpSFill />,\n\n    subNav: [\n      {\n        title: 'Linear Regression',\n        path: '/LeastSquares/Linearregression',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'Polynomial Regression',\n        path: '/LeastSquares/Polynomial',\n        icon: <IoIcons.IoIosPaper />,\n        cName: 'sub-nav'\n      },\n      {\n        title: 'Newton Interpolation',\n        path: '/LeastSquares/NewtonIterpolation',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  }\n];\n","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\SubMenu.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\RootofEquation.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Bisection.js",["131","132","133"],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Newton.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Onepoint.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Cramer.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LinearAlgebra.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\JacobiIteration.js",["134"],"import React, { Component } from 'react'\r\nimport {Matrix} from '../components/Matrix'\r\nimport 'antd/dist/antd.css';\r\nimport '../css/style.css';\r\nimport { Input , Button } from 'antd';\r\n\r\nimport axios from 'axios'\r\nlet apiUrl = \"http://localhost:4040/data/matrix/Jacobi_iteration?key=45134Asd4864wadfad\"\r\nfunction Jacobi(a,b,x,error_,_error) {\r\n\r\n    let wow = false;\r\n    let coss = 1;\r\n    let data = [];\r\n    let aws = [];\r\n\r\n    let x_old = [...x];\r\n\r\n    for(let i = 0;i < error_.length;i++){\r\n        if(error_[i] > _error){\r\n            wow = true;\r\n        }\r\n    }\r\n\r\n    while(wow){\r\n        \r\n        x_old = [...x];\r\n\r\n        for(let i = 0;i < a.length;i++){\r\n            x[i] = b[i];\r\n            for(let j = 0;j < a[0].length;j++){\r\n                if(i !== j){\r\n                    x[i] = x[i]- (a[i][j]*x_old[j])\r\n                }\r\n            }\r\n            x[i] = x[i]/a[i][i];\r\n            error_[i] = (x[i]-x_old[i])/x[i]\r\n        }\r\n\r\n        for(let i = 0;i < error_.length;i++){\r\n            if(error_[i] > 10){\r\n                return <div>ไม่มีคำตอบ</div>\r\n            }\r\n        }\r\n        aws = [];\r\n        aws.push(<div key={coss}>Iteration {coss}</div>)\r\n        for(let i = 0;i < x.length;i++){\r\n            aws.push(<div key={coss}>x{coss} : {x[i]} error : {error_[i]}</div>);\r\n        }\r\n        data.push(aws);\r\n\r\n        wow = false;\r\n\r\n        for(let i = 0;i < error_.length;i++){\r\n            if(error_[i] > _error){\r\n                wow = true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return data;\r\n}\r\nclass JacobiIteration extends Component{\r\n\r\n    state = {\r\n        rows: 2,\r\n        columns: 2,\r\n        Matrix: [[],[]],\r\n        X: [],\r\n        ERROR: 0.0001\r\n    }\r\n\r\n    async gatdata() { // ฟังชั้นเรียก api\r\n        try {\r\n\r\n            const data = await axios.post(apiUrl).then(e => (\r\n                e.data\r\n            ))\r\n            \r\n            let row = data[\"row\"];\r\n\r\n            if(row > parseInt(this.state.rows)){\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i < row;i++){\r\n                    this.AddMatrix();\r\n                }\r\n            }\r\n            else{\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i > row;i--){\r\n                    this.DelMatrix();\r\n                }\r\n            }\r\n                \r\n            this.setState({Matrix: data[\"Matrix\"],ERROR: data[\"error\"]})\r\n\r\n          } catch (error) {\r\n            this.setState({result : \"Not Sync\"})\r\n          }\r\n\r\n    }\r\n\r\n    getdata_ = (e) => {\r\n        this.gatdata();\r\n    }\r\n\r\n    Input = (e) =>{\r\n        let arr = [];\r\n        let Matrix = this.state.Matrix;\r\n        arr = e.target.name.split(',');\r\n        Matrix[parseInt(arr[0])][parseInt(arr[1])] = e.target.value;\r\n        this.setState({Matrix: Matrix})\r\n    }\r\n    \r\n    AddMatrix = (e) =>{\r\n        let Matrix = this.state.Matrix;\r\n        Matrix.push([]);\r\n        this.setState({Matrix: Matrix})\r\n        this.setState({rows: this.state.rows+1})\r\n    }\r\n\r\n\r\n    DelMatrix = (e) =>{\r\n        if(this.state.rows > 2){\r\n            let i;\r\n            this.setState({rows: this.state.rows-1})\r\n            let Matrix = this.state.Matrix;\r\n            Matrix.pop();\r\n            for(i = 0;i < Matrix.length;i++){\r\n                Matrix[i].pop();\r\n            }\r\n            this.setState({Matrix: Matrix})\r\n        }\r\n        \r\n    }\r\n\r\n    Calculate = (e) =>{\r\n        let temp = this.state.Matrix;\r\n\r\n        // copy array\r\n        let Matrix = [];\r\n        for (let i = 0; i < temp.length; i++)\r\n            Matrix[i] = temp[i].slice();\r\n\r\n        let a =[];\r\n        let b = [];\r\n        let x = [];\r\n        let error_ = [];\r\n\r\n        for(let i=0;i< Matrix.length;i++){\r\n            b.push(Matrix[i][Matrix.length])\r\n            b[i] = parseFloat(b[i])\r\n            a.push(Matrix[i])\r\n            a[i].pop()\r\n            for(let j = 0;j < Matrix.length;j++){\r\n                a[i][j] = parseFloat(a[i][j])\r\n            }\r\n            x.push(1);\r\n            error_.push(9999);\r\n        }\r\n\r\n        let answer = Jacobi(a,b,x,error_,parseFloat(this.state.ERROR))\r\n\r\n        this.setState({X: answer})\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='allincompro'>\r\n                <h2>Jacobi Iteration</h2>\r\n                <Button className='Button_' type=\"primary\" onClick={this.AddMatrix}>+</Button>\r\n                <Button className='Button_' type=\"primary\" danger onClick={this.DelMatrix}>-</Button>\r\n                <Button className='Button_' type=\"primary\" onClick={this.Calculate}>Submit</Button>\r\n                <Button type=\"primary\" danger onClick={this.getdata_} >Example</Button>\r\n                <Matrix row={this.state.rows} onChange={this.Input} value={this.state.Matrix}/>\r\n                <div>{this.state.X}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JacobiIteration","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Secant.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\GaussElimination.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\GaussSeidel.js",["135"],"import React, { Component } from 'react'\r\nimport {Matrix} from '../components/Matrix'\r\nimport 'antd/dist/antd.css';\r\nimport '../css/style.css';\r\nimport { Input , Button } from 'antd';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nlet apiUrl = \"http://localhost:4040/data/matrix/Gauss_seidel_interation?key=45134Asd4864wadfad\"\r\n\r\n// Fuc Jacobi \r\nfunction Jacobi(a,b,x,error_,_error) {\r\n\r\n    let wow = false;\r\n    let coss = 1;\r\n    let data = [];\r\n    let aws = [];\r\n\r\n    let x_old = [...x];\r\n\r\n    for(let i = 0;i < error_.length;i++){\r\n        if(error_[i] > _error){\r\n            wow = true;\r\n        }\r\n    }\r\n\r\n    while(wow){\r\n        \r\n        x_old = [...x];\r\n\r\n        for(let i = 0;i < a.length;i++){\r\n            x[i] = b[i];\r\n            for(let j = 0;j < a[0].length;j++){\r\n                if(i !== j){\r\n                    x[i] = x[i]- (a[i][j]*x_old[j])\r\n                }\r\n            }\r\n            x[i] = x[i]/a[i][i];\r\n            error_[i] = (x[i]-x_old[i])/x[i]\r\n        }\r\n\r\n        for(let i = 0;i < error_.length;i++){\r\n            if(error_[i] > 10){\r\n                return <div>ไม่มีคำตอบ</div>\r\n            }\r\n        }\r\n        aws = [];\r\n        aws.push(<div key={coss}>Iteration {coss}</div>)\r\n        for(let i = 0;i < x.length;i++){\r\n            aws.push(<div key={coss}>x{coss} : {x[i]} error : {error_[i]}</div>);\r\n        }\r\n        data.push(aws);\r\n\r\n        wow = false;\r\n\r\n        for(let i = 0;i < error_.length;i++){\r\n            if(error_[i] > _error){\r\n                wow = true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nclass GaussSeidel extends Component{\r\n\r\n    state = {\r\n        rows: 2,\r\n        Matrix: [[],[]],\r\n        X: [],\r\n        ERROR: 0.0001\r\n    }\r\n\r\n    async gatdata() { // ฟังชั้นเรียก api\r\n        try {\r\n\r\n            const data = await axios.post(apiUrl).then(e => (\r\n                e.data\r\n            ))\r\n            \r\n            let row = data[\"row\"];\r\n\r\n            if(row > parseInt(this.state.rows)){\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i < row;i++){\r\n                    this.AddMatrix();\r\n                }\r\n            }\r\n            else{\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i > row;i--){\r\n                    this.DelMatrix();\r\n                }\r\n            }\r\n                \r\n            this.setState({Matrix: data[\"Matrix\"],ERROR: data[\"error\"]})\r\n\r\n          } catch (error) {\r\n            this.setState({result : \"Not Sync\"})\r\n          }\r\n\r\n    }\r\n\r\n    getdata_ = (e) => {\r\n        this.gatdata();\r\n    }\r\n\r\n    Input = (e) =>{\r\n        let arr = [];\r\n        let Matrix = this.state.Matrix;\r\n        arr = e.target.name.split(',');\r\n        Matrix[parseInt(arr[0])][parseInt(arr[1])] = e.target.value;\r\n        this.setState({Matrix: Matrix})\r\n    }\r\n    \r\n    AddMatrix = (e) =>{\r\n        \r\n        let Matrix = this.state.Matrix;\r\n        Matrix.push([]);\r\n        this.setState({Matrix: Matrix})\r\n        this.setState({rows: this.state.rows+1})\r\n    }\r\n\r\n    DelMatrix = (e) =>{\r\n        if(this.state.rows > 2){\r\n            let i;\r\n            this.setState({rows: this.state.rows-1})\r\n            let Matrix = this.state.Matrix;\r\n            Matrix.pop();\r\n            for(i = 0;i < Matrix.length;i++){\r\n                Matrix[i].pop();\r\n            }\r\n            this.setState({Matrix: Matrix})\r\n        }\r\n        \r\n    }\r\n\r\n    Calculate = (e) =>{\r\n        let temp = this.state.Matrix;\r\n\r\n        // copy array\r\n        let Matrix = [];\r\n        for (let i = 0; i < temp.length; i++)\r\n            Matrix[i] = temp[i].slice();\r\n\r\n        let a =[];\r\n        let b = [];\r\n        let x = [];\r\n        let error_ = [];\r\n\r\n        for(let i=0;i< Matrix.length;i++){\r\n            b.push(Matrix[i][Matrix.length])\r\n            b[i] = parseFloat(b[i])\r\n            a.push(Matrix[i])\r\n            a[i].pop()\r\n            for(let j = 0;j < Matrix.length;j++){\r\n                a[i][j] = parseFloat(a[i][j])\r\n            }\r\n            x.push(1);\r\n            error_.push(9999);\r\n        }\r\n\r\n        let answer = Jacobi(a,b,x,error_,parseFloat(this.state.ERROR))\r\n\r\n        this.setState({X: answer})\r\n\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='allincompro'>\r\n                <h2>Gauss seidel interation</h2>\r\n                <Button className='Button_' type=\"primary\"  onClick={this.AddMatrix}>+</Button>\r\n                <Button className='Button_' type=\"primary\" danger onClick={this.DelMatrix}>-</Button>\r\n                <Button className='Button_' type=\"primary\" onClick={this.Calculate}>Submit</Button>\r\n                <Button type=\"primary\" danger onClick={this.getdata_} >Example</Button>\r\n                <Matrix row={this.state.rows} onChange={this.Input} value={this.state.Matrix}/>\r\n                <div>{this.state.X}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GaussSeidel;","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\ConjugateGradient.js",["136"],"import React, { Component } from 'react'\r\nimport {Matrix} from '../components/Matrix'\r\nimport 'antd/dist/antd.css';\r\nimport '../css/style.css';\r\nimport { Input , Button } from 'antd';\r\n\r\nimport axios from 'axios'\r\nlet apiUrl = \"http://localhost:4040/data/matrix/Conjugate_gradient_method?key=45134Asd4864wadfad\"\r\n\r\nvar math = require('mathjs');\r\n\r\nexport function Conjugates(a,b,x,err){\r\n    let r = math.multiply(-1,b);\r\n    let coss = 1;\r\n    let data = [];\r\n\r\n    let d = math.multiply(-1,r)\r\n    let ramda = math.multiply(math.multiply(-1,math.transpose(d)),r)/math.multiply(math.transpose(d),math.multiply(a,d));\r\n\r\n    console.log(\"ramda : \" + ramda.toString());\r\n\r\n    for(let i = 0;i < x.length;i++){\r\n        x[i] = x[i] + (d[i]*ramda);\r\n    }\r\n\r\n    let aws = [];\r\n    aws.push(<div key={coss}>Iteration {coss}</div>)\r\n    for(let i = 0;i < x.length;i++){\r\n        aws.push(<div key={coss}>x{i+1} : {x[i]}</div>);\r\n    }\r\n    data.push(aws);\r\n    coss++;\r\n    let error_ = 99999999999999\r\n    \r\n    while(error_ > err){\r\n        let error_old = error_;\r\n        let temp = math.multiply(a,x);\r\n        \r\n        for(let i = 0;i < b.length;i++){\r\n            r[i] = temp[i] - b[i];\r\n        }\r\n\r\n        let alpha =  math.multiply(math.multiply(math.transpose(r),a),d)/math.multiply(math.multiply(math.transpose(d),a),d)\r\n\r\n        for(let i = 0;i < b.length;i++){\r\n            d[i] = (r[i]*-1)+(alpha*d[i]);\r\n        }\r\n        let ramda = math.multiply(math.multiply(-1,math.transpose(d)),r)/math.multiply(math.transpose(d),math.multiply(a,d));\r\n\r\n\r\n        for(let i = 0;i < x.length;i++){\r\n            x[i] = x[i] + (d[i]*ramda);\r\n        }\r\n\r\n        aws = [];\r\n        aws.push(<div key={coss}>Iteration {coss}</div>)\r\n        for(let i = 0;i < x.length;i++){\r\n            aws.push(<div key={coss}>x{i+1} : {x[i]}</div>);\r\n        }\r\n        data.push(aws);\r\n        coss++;\r\n\r\n        error_ = math.sqrt(math.multiply(math.transpose(r),r))\r\n        if(error_ > error_old){\r\n            return <div>ไม่มีคำตอบ</div>;\r\n        }\r\n\r\n    }\r\n    return data;\r\n}\r\n\r\n\r\n\r\n\r\nclass ConjugateGradient extends Component{\r\n\r\n    state = {\r\n        rows: 2,\r\n        Matrix: [[],[]],\r\n        X: [],\r\n        ERROR: 0.0001\r\n    }\r\n\r\n    async gatdata() { // ฟังชั้นเรียก api\r\n        try {\r\n\r\n            const data = await axios.post(apiUrl).then(e => (\r\n                e.data\r\n            ))\r\n            \r\n            let row = data[\"row\"];\r\n\r\n            if(row > parseInt(this.state.rows)){\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i < row;i++){\r\n                    this.AddMatrix();\r\n                }\r\n            }\r\n            else{\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i > row;i--){\r\n                    this.DelMatrix();\r\n                }\r\n            }\r\n                \r\n            this.setState({Matrix: data[\"Matrix\"],ERROR: data[\"error\"]})\r\n\r\n          } catch (error) {\r\n            this.setState({result : \"Not Sync\"})\r\n          }\r\n\r\n    }\r\n\r\n    getdata_ = (e) => {\r\n        this.gatdata();\r\n    }\r\n\r\n\r\n    Input = (e) =>{\r\n        let arr = [];\r\n        let Matrix = this.state.Matrix;\r\n        arr = e.target.name.split(',');\r\n        Matrix[parseInt(arr[0])][parseInt(arr[1])] = e.target.value;\r\n        this.setState({Matrix: Matrix})\r\n    }\r\n    \r\n    AddMatrix = (e) =>{\r\n        \r\n        let Matrix = this.state.Matrix;\r\n        Matrix.push([]);\r\n        this.setState({Matrix: Matrix})\r\n        this.setState({rows: this.state.rows+1})\r\n    }\r\n\r\n    getERR= (e) => {\r\n        this.setState({\r\n            ERROR: e.target.value,\r\n        });\r\n    };\r\n\r\n    DelMatrix = (e) =>{\r\n        if(this.state.rows > 2){\r\n            let i;\r\n            this.setState({rows: this.state.rows-1})\r\n            let Matrix = this.state.Matrix;\r\n            Matrix.pop();\r\n            for(i = 0;i < Matrix.length;i++){\r\n                Matrix[i].pop();\r\n            }\r\n            this.setState({Matrix: Matrix})\r\n        }\r\n        \r\n    }\r\n\r\n    Calculate = (e) =>{\r\n        let temp = this.state.Matrix;\r\n\r\n        // copy array\r\n        let Matrix = [];\r\n        for (let i = 0; i < temp.length; i++)\r\n            Matrix[i] = temp[i].slice();\r\n\r\n        let a =[];\r\n        let b = [];\r\n        let x = [];\r\n\r\n        for(let i=0;i< Matrix.length;i++){\r\n            b.push(Matrix[i][Matrix.length])\r\n            b[i] = parseFloat(b[i])\r\n            a.push(Matrix[i])\r\n            a[i].pop()\r\n            for(let j = 0;j < Matrix.length;j++){\r\n                a[i][j] = parseFloat(a[i][j])\r\n            }\r\n            x.push(0);\r\n        }\r\n\r\n        let answer = Conjugates(a,b,x,parseFloat(this.state.ERROR))\r\n\r\n        this.setState({X: answer})\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='allincompro'>\r\n                <h2>Conjugate gradient method</h2>\r\n                <Button className='Button_' type=\"primary\" onClick={this.AddMatrix}>+</Button>\r\n                <Button className='Button_' type=\"primary\" danger onClick={this.DelMatrix}>-</Button>\r\n                <Button className='Button_' type=\"primary\" onClick={this.Calculate}>Submit</Button>\r\n                <Button type=\"primary\" danger onClick={this.getdata_} >Example</Button>\r\n                <Matrix row={this.state.rows} onChange={this.Input} value={this.state.Matrix}/>\r\n                <div>{this.state.X}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConjugateGradient;","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LuDecomposition.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\NewtonDiff.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Largrange.js",["137"],"import React, { Component } from 'react'\r\nimport { Input , Button} from 'antd'\r\nimport {Matrix2Input} from '../components/Matrix'\r\n\r\n\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\r\n\r\n\r\nimport axios from 'axios'\r\nlet apiUrl = \"http://localhost:4040/data/interpolation/lagrange_interpolation?key=45134Asd4864wadfad\"\r\n\r\n\r\n let Lagranges = function(x1, y1, x2, y2) {\r\n\t\r\n\tthis.xs = [x1, x2];\r\n\tthis.ys = [y1, y2];\r\n\tthis.ws = [];\r\n\tthis._updateWeights();\r\n}\r\n\r\n/**\r\n * Adds a new point to the polynomial. L(x) = y\r\n * @return {Number} The index of the added point. Used for changing the point. See changePoint.\r\n */\r\nLagranges.prototype.addPoint = function(x, y) {\r\n\tthis.xs.push(x);\r\n\tthis.ys.push(y);\r\n\tthis._updateWeights();\r\n\treturn this.xs.length-1;\r\n}\r\n\r\n/**\r\n * Changes a previously added point.\r\n */\r\nLagranges.prototype.changePoint = function(index, x, y) {\r\n\tthis.xs[index] = x;\r\n\tthis.ys[index] = y;\r\n\tthis._updateWeights();\r\n}\r\n\r\n/**\r\n * Recalculate barycentric weights.\r\n */\r\nLagranges.prototype._updateWeights = function() {\r\n\tlet k = this.xs.length;\r\n\tlet w;\r\n\t\r\n\tfor (let j = 0; j < k; ++j) {\r\n\t\tw = 1;\r\n\t\tfor (let i = 0; i < k; ++i) {\r\n\t\t\tif (i !== j) {\r\n\t\t\t\tw *= this.xs[j] - this.xs[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.ws[j] = 1/w;\r\n\t}\r\n}\r\n\r\n/**\r\n * Calculate L(x)\r\n */\r\nLagranges.prototype.valueOf = function(x) {\r\n\tlet a = 0;\r\n\tlet b = 0;\r\n\tlet c = 0;\r\n\t\r\n\tfor (let j = 0; j < this.xs.length; ++j) {\r\n\t\tif (x !== this.xs[j]) {\r\n\t\t\ta = this.ws[j] / (x - this.xs[j]);\r\n\t\t\tb += a * this.ys[j];\r\n\t\t\tc += a;\r\n\t\t} else {\r\n\t\t\treturn this.ys[j];\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn b / c;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass Largrange extends Component{\r\n\r\n    state = {\r\n        rows: 2,\r\n        Matrix: [[],[]],\r\n        X: 0,\r\n        Answer: '',\r\n        Chart: '',\r\n        Y: ''\r\n    }\r\n\r\n    async gatdata() { // ฟังชั้นเรียก api\r\n        try {\r\n\r\n            const data = await axios.post(apiUrl).then(e => (\r\n                e.data\r\n            ))\r\n            \r\n            let row = data[\"row\"];\r\n\r\n            if(row > parseInt(this.state.rows)){\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i < row;i++){\r\n                    this.AddMatrix();\r\n                }\r\n            }\r\n            else{\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i > row;i--){\r\n                    this.DelMatrix();\r\n                }\r\n            }\r\n                \r\n            this.setState({Matrix: data[\"Matrix\"],X: data[\"X\"]})\r\n\r\n          } catch (error) {\r\n            this.setState({result : \"Not Sync\"})\r\n          }\r\n\r\n    }\r\n\r\n    getdata_ = (e) => {\r\n        this.gatdata();\r\n    }\r\n\r\n    AddMatrix = (e) =>{\r\n        let Matrix = this.state.Matrix;\r\n        Matrix.push([]);\r\n        this.setState({Matrix: Matrix})\r\n        this.setState({rows: this.state.rows+1})\r\n    }\r\n\r\n    DelMatrix = (e) =>{\r\n        if(this.state.rows > 2){\r\n            this.setState({rows: this.state.rows-1})\r\n            let Matrix = this.state.Matrix;\r\n            Matrix.pop();\r\n            this.setState({Matrix: Matrix})\r\n        }\r\n    }\r\n\r\n    Input = (e) =>{\r\n        let arr = [];\r\n        let Matrix = this.state.Matrix;\r\n        arr = e.target.name.split(',');\r\n        Matrix[parseInt(arr[0])][parseInt(arr[1])] = e.target.value;\r\n        this.setState({Matrix: Matrix})\r\n    }\r\n\r\n    GetX = (e) =>{\r\n        let X = this.state.X;\r\n        X = e.target.value;\r\n        this.setState({X: X})\r\n    }\r\n\r\n    Calculate = (e) =>{\r\n        let Matrix = this.state.Matrix\r\n        let wow = new Lagranges(parseFloat(Matrix[0][0]), parseFloat(Matrix[0][1]), parseFloat(Matrix[1][0]), parseFloat(Matrix[1][1]));\r\n        let index;\r\n        let mid = (Matrix[0][0]+Matrix[1][0])/2;\r\n        let Chart = [];\r\n        for(let i = 2;i < Matrix.length;i++){\r\n            index = wow.addPoint(parseFloat(Matrix[i][0]), parseFloat(Matrix[i][1]));\r\n        }\r\n\r\n        for(let i = Matrix[0][0];i <= Matrix[Matrix.length-1][0]+mid;i+=mid){\r\n            let y = wow.valueOf(i);\r\n            Chart.push({x: i,y: y});\r\n        }\r\n\r\n        this.setState({Answer : wow.valueOf(parseFloat(this.state.X)),Chart: Chart,Y: wow.valueOf(parseFloat(this.state.X))})\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='allincompro'>\r\n                <h2>Lagrange interpolation</h2>\r\n                <div>\r\n                    <Button className='Button_' type=\"primary\" onClick={this.AddMatrix}>Add Point</Button>\r\n                    <Button className='Button_' type=\"primary\" onClick={this.DelMatrix}>Delete Point</Button>\r\n                    <Button className='Button_' type=\"primary\" onClick={this.Calculate}>Calculate</Button>\r\n                    <Button type=\"primary\" onClick={this.getdata_} >Get example</Button>\r\n                </div>\r\n                <span className=\"Text_Input_2\"> X value : </span>\r\n                <span><Input value={this.state.X} onChange={this.GetX} className=\"Input_2\"/></span>\r\n                <Matrix2Input row={this.state.rows} onChange={this.Input} value={this.state.Matrix}/>\r\n                <div>{this.state.Answer}</div>\r\n                <LineChart width={1200} height={300} data={this.state.Chart} margin={{ top: 5, right: 20, bottom: 5, left: 400 }}>\r\n                    <Line type=\"monotone\" dataKey=\"y\" stroke=\"#0000FF\" dot={false}/>\r\n                    <CartesianGrid stroke=\"#ccc\" />\r\n                    <XAxis dataKey=\"x\" type=\"number\" interval='preserveStart'/>\r\n                    <YAxis />\r\n                    <ReferenceLine x={parseFloat(this.state.X)} stroke=\"red\" label={parseFloat(this.state.X)} />\r\n                    <ReferenceLine y={parseFloat(this.state.Y)} label={parseFloat(this.state.Y)} stroke=\"red\" />\r\n                    </LineChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Largrange;","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Linearregression.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Interpolation.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\LeastSquares.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Polynomial.js",["138","139","140","141","142"],"import React, { Component } from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport '../css/style.css';\r\nimport { Input , Button} from 'antd'\r\n\r\nimport {Matrix2Input} from '../components/Matrix'\r\nimport regression from 'regression';\r\n\r\nimport { ComposedChart, Line ,XAxis , YAxis, CartesianGrid, Scatter, ReferenceLine} from 'recharts';\r\nimport PolynomialRegression from \"js-polynomial-regression\";\r\nimport axios from 'axios'\r\nlet apiUrl = \"http://localhost:4040/data/interpolation/polynomial_regression?key=45134Asd4864wadfad\"\r\n\r\nvar math = require('mathjs');\r\n\r\nclass Polynomial extends Component{\r\n\r\n    \r\n    state = {\r\n        rows: 2,\r\n        Matrix: [[],[]],\r\n        X: 0,\r\n        Answer: '',\r\n        Chart: '',\r\n        Y: ''\r\n    }\r\n\r\n    async gatdata() { // ฟังชั้นเรียก api\r\n        try {\r\n\r\n            const data = await axios.post(apiUrl).then(e => (\r\n                e.data\r\n            ))\r\n            \r\n            let row = data[\"row\"];\r\n\r\n            if(row > parseInt(this.state.rows)){\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i < row;i++){\r\n                    this.AddMatrix();\r\n                }\r\n            }\r\n            else{\r\n                let r = parseInt(this.state.rows);\r\n                for(let i = r;i > row;i--){\r\n                    this.DelMatrix();\r\n                }\r\n            }\r\n                \r\n            this.setState({Matrix: data[\"Matrix\"],X: data[\"X\"]})\r\n\r\n          } catch (error) {\r\n            this.setState({Answer : \"Not Sync\"})\r\n          }\r\n\r\n    }\r\n\r\n    getdata_ = (e) => {\r\n        this.gatdata();\r\n    }\r\n\r\n    AddMatrix = (e) =>{\r\n        let Matrix = this.state.Matrix;\r\n        Matrix.push([]);\r\n        this.setState({Matrix: Matrix})\r\n        this.setState({rows: this.state.rows+1})\r\n    }\r\n\r\n    DelMatrix = (e) =>{\r\n        if(this.state.rows > 2){\r\n            this.setState({rows: this.state.rows-1})\r\n            let Matrix = this.state.Matrix;\r\n            Matrix.pop();\r\n            this.setState({Matrix: Matrix})\r\n        }\r\n    }\r\n\r\n    Input = (e) =>{\r\n        let arr = [];\r\n        let Matrix = this.state.Matrix;\r\n        arr = e.target.name.split(',');\r\n        Matrix[parseInt(arr[0])][parseInt(arr[1])] = e.target.value;\r\n        this.setState({Matrix: Matrix})\r\n    }\r\n\r\n    GetX = (e) =>{\r\n        let X = this.state.X;\r\n        X = e.target.value;\r\n        this.setState({X: X})\r\n    }\r\n\r\n    Calculate = (e) =>{\r\n        let Matrix = this.state.Matrix;\r\n        let data = [];\r\n        const x = parseFloat(this.state.X);\r\n        for(let i =0;i < Matrix.length;i++){\r\n            data.push({x: parseFloat(Matrix[i][0]),y: parseFloat(Matrix[i][1])})\r\n        }\r\n        const model = PolynomialRegression.read(data, 3);\r\n        const terms = model.getTerms();\r\n        let Chart = []\r\n        let y;\r\n        let result = regression.polynomial(data);\r\n        let a0 = parseFloat(result.equation[0]);\r\n        let a1 = parseFloat(result.equation[1]);\r\n        let a2 = parseFloat(result.equation[2]);\r\n\r\n        for(let i = 0;i < Matrix.length;i++){\r\n            y = model.predictY(terms, parseFloat(Matrix[i][0]));\r\n            Chart.push({x: parseFloat(Matrix[i][0]),y: y,trueY: parseFloat(Matrix[i][1])});\r\n        }\r\n\r\n        this.setState({Answer: model.predictY(terms, parseFloat(this.state.X)),Chart: Chart,Y: model.predictY(terms, parseFloat(this.state.X))})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='allincompro'>\r\n                <h2>Polynomial regression</h2>\r\n                <Button className='Button_' type=\"primary\" onClick={this.AddMatrix}>+</Button>\r\n                <Button className='Button_' type=\"primary\" danger onClick={this.DelMatrix}>-</Button>\r\n                <Button className='Button_' type=\"primary\" onClick={this.Calculate}>Submit</Button>\r\n                <Button type=\"primary\" danger onClick={this.getdata_} >Example</Button>\r\n                <div>\r\n                    <span className=\"Text_Input_2\"> X value : </span>\r\n                    <span><Input value={this.state.X} onChange={this.GetX} className=\"Input_2\"/></span>\r\n                </div>\r\n                <Matrix2Input row={this.state.rows} onChange={this.Input} value={this.state.Matrix}/>\r\n                <div>{this.state.Answer}</div>\r\n                <ComposedChart width={1200} height={300} data={this.state.Chart} margin={{ top: 5, right: 20, bottom: 5, left: 400 }}>\r\n                    <XAxis dataKey=\"x\" type=\"number\" />\r\n                    <YAxis />\r\n                    <Scatter name=\"x\" dataKey=\"trueY\" fill=\"#FFB700\" />\r\n                    <Line type=\"monotone\" dataKey=\"y\" stroke=\"#0000FF\" dot={false}/>\r\n                    <CartesianGrid stroke=\"#ccc\" />\r\n                    <ReferenceLine x={parseFloat(this.state.X)} stroke=\"red\" label={parseFloat(this.state.X)} />\r\n                    <ReferenceLine y={parseFloat(this.state.Y)} label={parseFloat(this.state.Y)} stroke=\"red\" />\r\n\r\n                    </ComposedChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Polynomial;","C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\False_position.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\components\\Matrix.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\Splinex.js",[],"C:\\Users\\User\\Desktop\\Numerical-Project\\src\\pages\\NewtonIterpolation.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":2,"column":13,"nodeType":"151","messageId":"152","endLine":2,"endColumn":20},{"ruleId":"149","severity":1,"message":"153","line":2,"column":34,"nodeType":"151","messageId":"152","endLine":2,"endColumn":39},{"ruleId":"149","severity":1,"message":"154","line":12,"column":7,"nodeType":"151","messageId":"152","endLine":12,"endColumn":14},{"ruleId":"149","severity":1,"message":"155","line":23,"column":7,"nodeType":"151","messageId":"152","endLine":23,"endColumn":18},{"ruleId":"149","severity":1,"message":"156","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":15},{"ruleId":"149","severity":1,"message":"156","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":15},{"ruleId":"149","severity":1,"message":"156","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":15},{"ruleId":"149","severity":1,"message":"157","line":166,"column":13,"nodeType":"151","messageId":"152","endLine":166,"endColumn":18},{"ruleId":"149","severity":1,"message":"158","line":14,"column":5,"nodeType":"151","messageId":"152","endLine":14,"endColumn":9},{"ruleId":"149","severity":1,"message":"159","line":95,"column":15,"nodeType":"151","messageId":"152","endLine":95,"endColumn":16},{"ruleId":"149","severity":1,"message":"160","line":104,"column":13,"nodeType":"151","messageId":"152","endLine":104,"endColumn":15},{"ruleId":"149","severity":1,"message":"161","line":105,"column":13,"nodeType":"151","messageId":"152","endLine":105,"endColumn":15},{"ruleId":"149","severity":1,"message":"162","line":106,"column":13,"nodeType":"151","messageId":"152","endLine":106,"endColumn":15},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"no-unused-vars","'FaIcons' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'columns' is assigned a value but never used.","'dataInTable' is assigned a value but never used.","'Input' is defined but never used.","'index' is assigned a value but never used.","'math' is assigned a value but never used.","'x' is assigned a value but never used.","'a0' is assigned a value but never used.","'a1' is assigned a value but never used.","'a2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]